// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package infra

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const findAllCategories = `-- name: FindAllCategories :many
select c.id, c.label, c.icon
from categories c
`

type FindAllCategoriesRow struct {
	ID    uuid.UUID `json:"id"`
	Label string    `json:"label"`
	Icon  string    `json:"icon"`
}

func (q *Queries) FindAllCategories(ctx context.Context) ([]FindAllCategoriesRow, error) {
	rows, err := q.db.QueryContext(ctx, findAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindAllCategoriesRow{}
	for rows.Next() {
		var i FindAllCategoriesRow
		if err := rows.Scan(&i.ID, &i.Label, &i.Icon); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllRestaurants = `-- name: FindAllRestaurants :many
select r.id,
       r.name,
       r.lat,
       r.lng,
       r.address,
       r.google_place_id,
       bool_and(vr.id is not null)                     as visited,
       coalesce(avg(vr.rate), 0)::double precision     as rate,
       coalesce(bool_and(vr.favorite), false)::boolean as favorite
from restaurants r
         left join visited_restaurants vr on r.id = vr.restaurant_id
group by r.id, r.name, r.lat, r.lng, r.address, r.google_place_id
`

type FindAllRestaurantsRow struct {
	ID            uuid.UUID `json:"id"`
	Name          string    `json:"name"`
	Lat           float64   `json:"lat"`
	Lng           float64   `json:"lng"`
	Address       string    `json:"address"`
	GooglePlaceID string    `json:"googlePlaceId"`
	Visited       bool      `json:"visited"`
	Rate          float64   `json:"rate"`
	Favorite      bool      `json:"favorite"`
}

func (q *Queries) FindAllRestaurants(ctx context.Context) ([]FindAllRestaurantsRow, error) {
	rows, err := q.db.QueryContext(ctx, findAllRestaurants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindAllRestaurantsRow{}
	for rows.Next() {
		var i FindAllRestaurantsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Lat,
			&i.Lng,
			&i.Address,
			&i.GooglePlaceID,
			&i.Visited,
			&i.Rate,
			&i.Favorite,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllTemporaryUsers = `-- name: FindAllTemporaryUsers :many
select id, email, token, created_at
from temporary_users
`

func (q *Queries) FindAllTemporaryUsers(ctx context.Context) ([]TemporaryUser, error) {
	rows, err := q.db.QueryContext(ctx, findAllTemporaryUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TemporaryUser{}
	for rows.Next() {
		var i TemporaryUser
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Token,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCategoriesByRestaurantIds = `-- name: FindCategoriesByRestaurantIds :many
select c.id, rc.restaurant_id
from categories c
         inner join restaurants_categories rc on c.id = rc.category_id
where rc.restaurant_id = any ($1::uuid[])
`

type FindCategoriesByRestaurantIdsRow struct {
	ID           uuid.UUID `json:"id"`
	RestaurantID uuid.UUID `json:"restaurantId"`
}

func (q *Queries) FindCategoriesByRestaurantIds(ctx context.Context, dollar_1 []uuid.UUID) ([]FindCategoriesByRestaurantIdsRow, error) {
	rows, err := q.db.QueryContext(ctx, findCategoriesByRestaurantIds, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindCategoriesByRestaurantIdsRow{}
	for rows.Next() {
		var i FindCategoriesByRestaurantIdsRow
		if err := rows.Scan(&i.ID, &i.RestaurantID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
