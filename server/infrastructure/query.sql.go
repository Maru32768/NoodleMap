// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package infrastructure

import (
	"context"
)

const findAllRestaurants = `-- name: FindAllRestaurants :many
select id, name, lat, lng, address, google_place_id, created_at, updated_at
from restaurants
`

func (q *Queries) FindAllRestaurants(ctx context.Context) ([]Restaurant, error) {
	rows, err := q.db.QueryContext(ctx, findAllRestaurants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Restaurant
	for rows.Next() {
		var i Restaurant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Lat,
			&i.Lng,
			&i.Address,
			&i.GooglePlaceID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllTemporaryUsers = `-- name: FindAllTemporaryUsers :many
select id, email, token, created_at
from temporary_users
`

func (q *Queries) FindAllTemporaryUsers(ctx context.Context) ([]TemporaryUser, error) {
	rows, err := q.db.QueryContext(ctx, findAllTemporaryUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TemporaryUser
	for rows.Next() {
		var i TemporaryUser
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Token,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllUsers = `-- name: FindAllUsers :many
select id, email, password, salt, created_at, updated_at
from users
`

func (q *Queries) FindAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, findAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Salt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllVisitedRestaurants = `-- name: FindAllVisitedRestaurants :many
select id, restaurant_id, rate, favorite, created_at, updated_at
from visited_restaurants
`

func (q *Queries) FindAllVisitedRestaurants(ctx context.Context) ([]VisitedRestaurant, error) {
	rows, err := q.db.QueryContext(ctx, findAllVisitedRestaurants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VisitedRestaurant
	for rows.Next() {
		var i VisitedRestaurant
		if err := rows.Scan(
			&i.ID,
			&i.RestaurantID,
			&i.Rate,
			&i.Favorite,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
